diff --git a/cpu.v b/cpu.v
index ed8da62..6e0c0c8 100644
--- a/cpu.v
+++ b/cpu.v
@@ -18,9 +18,10 @@
  * on the output pads if external memory is required.
  */
 
-module cpu( clk, reset, AB, DI, DO, WE, IRQ, NMI, RDY );
+module cpu( clk, clken, reset, AB, DI, DO, WE, IRQ, NMI, RDY );
 
 input clk;              // CPU clock 
+input clken;		// CPU clock enable
 input reset;            // reset signal
 output reg [15:0] AB;   // address bus
 input [7:0] DI;         // data in, read bus
@@ -347,8 +348,10 @@ always @*
  * Set new PC
  */
 always @(posedge clk) 
+    if (clken) begin
     if( RDY )
         PC <= PC_temp + PC_inc;
+    end
 
 /*
  * Address Generator 
@@ -411,6 +414,8 @@ always @*
  * source of the address, such as the ALU or DI.
  */
 always @(posedge clk)
+    if (clken) begin
+
     if( state != PUSH0 && state != PUSH1 && RDY && 
         state != PULL0 && state != PULL1 && state != PULL2 )
     begin
@@ -418,6 +423,8 @@ always @(posedge clk)
         ABH <= AB[15:8];
     end
 
+    end
+    
 /*
  * Data Out MUX 
  */
@@ -489,7 +496,11 @@ always @*
  */
 
 always @(posedge clk)
+    if (clken) begin
+
     adj_bcd <= adc_sbc & D;     // '1' when doing a BCD instruction
+    
+    end
 
 reg [3:0] ADJL;
 reg [3:0] ADJH;
@@ -529,9 +540,12 @@ end
  * the ALU during those cycles.
  */
 always @(posedge clk)
+    if (clken) begin
+
     if( write_register & RDY )
         AXYS[regsel] <= (state == JSR0) ? DIMUX : { ADD[7:4] + ADJH, ADD[3:0] + ADJL };
 
+    end
 /*
  * register select logic. This determines which of the A, X, Y or
  * S registers will be accessed. 
@@ -622,9 +636,12 @@ always @*
  */
 
 always @(posedge clk)
+    if (clken) begin
+
     if( RDY )
         backwards <= DIMUX[7];
-
+	
+    end
 /* 
  * ALU A Input MUX 
  */
@@ -742,6 +759,8 @@ always @*
  * Update C flag when doing ADC/SBC, shift/rotate, compare
  */
 always @(posedge clk )
+    if (clken) begin
+
     if( shift && state == WRITE ) 
         C <= CO;
     else if( state == RTI2 )
@@ -757,11 +776,14 @@ always @(posedge clk )
         end
     end
 
+    end
 /*
  * Update Z, N flags when writing A, X, Y, Memory, or when doing compare
  */
 
 always @(posedge clk) 
+    if (clken) begin
+
     if( state == WRITE ) 
         Z <= AZ;
     else if( state == RTI2 )
@@ -773,7 +795,11 @@ always @(posedge clk)
             Z <= AZ;
     end
 
+    end
+    
 always @(posedge clk)
+    if (clken) begin
+
     if( state == WRITE )
         N <= AN;
     else if( state == RTI2 )
@@ -786,11 +812,14 @@ always @(posedge clk)
     end else if( state == FETCH && bit_ins ) 
         N <= DIMUX[7];
 
+    end
 /*
  * Update I flag
  */
 
 always @(posedge clk)
+    if (clken) begin
+
     if( state == BRK3 )
         I <= 1;
     else if( state == RTI2 )
@@ -801,10 +830,13 @@ always @(posedge clk)
     end else if( state == DECODE )
         if( plp ) I <= ADD[2];
 
+    end
 /*
  * Update D flag
  */
 always @(posedge clk ) 
+    if (clken) begin
+
     if( state == RTI2 )
         D <= DIMUX[3];
     else if( state == DECODE ) begin
@@ -813,10 +845,13 @@ always @(posedge clk )
         if( plp ) D <= ADD[3];
     end
 
+    end
 /*
  * Update V flag
  */
 always @(posedge clk )
+    if (clken) begin
+
     if( state == RTI2 ) 
         V <= DIMUX[6];
     else if( state == DECODE ) begin
@@ -826,6 +861,7 @@ always @(posedge clk )
     end else if( state == FETCH && bit_ins ) 
         V <= DIMUX[6];
 
+    end
 /*
  * Instruction decoder
  */
@@ -837,6 +873,8 @@ always @(posedge clk )
  */
 
 always @(posedge clk )
+    if (clken) begin
+
     if( reset )
         IRHOLD_valid <= 0;
     else if( RDY ) begin
@@ -847,13 +885,19 @@ always @(posedge clk )
             IRHOLD_valid <= 0;
     end
 
+    end
+    
 assign IR = (IRQ & ~I) | NMI_edge ? 8'h00 :
                      IRHOLD_valid ? IRHOLD : DIMUX;
 
 always @(posedge clk )
+    if (clken) begin
+
     if( RDY )
         DIHOLD <= DI;
 
+    end
+    
 assign DIMUX = ~RDY ? DIHOLD : DI;
 
 /*
@@ -862,7 +906,7 @@ assign DIMUX = ~RDY ? DIHOLD : DI;
 always @(posedge clk or posedge reset)
     if( reset )
         state <= BRK0;
-    else if( RDY ) case( state )
+    else if(clken & RDY ) case( state )
         DECODE  : 
             casex ( IR )
                 8'b0000_0000:   state <= BRK0;
@@ -964,12 +1008,18 @@ always @(posedge clk or posedge reset)
  */
 
 always @(posedge clk)
+    if (clken) begin
+
      if( reset )
          res <= 1;
      else if( state == DECODE )
          res <= 0;
 
+    end
+    
 always @(posedge clk)
+    if (clken) begin
+
      if( state == DECODE && RDY )
         casex( IR )
                 8'b0xx01010,    // ASLA, ROLA, LSRA, RORA
@@ -985,9 +1035,12 @@ always @(posedge clk)
 
                 default:        load_reg <= 0;
         endcase
-
+    end
+    
 always @(posedge clk)
-     if( state == DECODE && RDY )
+    if (clken) begin
+
+    if( state == DECODE && RDY )
         casex( IR )
                 8'b1110_1000,   // INX
                 8'b1100_1010,   // DEX
@@ -1005,8 +1058,11 @@ always @(posedge clk)
 
                 default:        dst_reg <= SEL_A;
         endcase
-
+    end
+    
 always @(posedge clk)
+    if (clken) begin
+    
      if( state == DECODE && RDY )
         casex( IR )
                 8'b1011_1010:   // TSX 
@@ -1027,7 +1083,12 @@ always @(posedge clk)
                 default:        src_reg <= SEL_A;
         endcase
 
+    end
+   
+   
 always @(posedge clk) 
+    if (clken) begin
+
      if( state == DECODE && RDY )
         casex( IR )
                 8'bxxx1_0001,   // INDY
@@ -1037,9 +1098,11 @@ always @(posedge clk)
 
                 default:        index_y <= 0;
         endcase
-
+    end
 
 always @(posedge clk)
+    if (clken) begin
+
      if( state == DECODE && RDY )
         casex( IR )
                 8'b100x_x1x0,   // STX, STY
@@ -1049,8 +1112,11 @@ always @(posedge clk)
                 default:        store <= 0;
 
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
+
      if( state == DECODE && RDY )
         casex( IR )
                 8'b0xxx_x110,   // ASL, ROL, LSR, ROR
@@ -1059,17 +1125,20 @@ always @(posedge clk )
 
                 default:        write_back <= 0;
         endcase
-
+    end
 
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b101x_xxxx:   // LDA, LDX, LDY
                                 load_only <= 1;
                 default:        load_only <= 0;
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b111x_x110,   // INC 
@@ -1078,8 +1147,10 @@ always @(posedge clk )
 
                 default:        inc <= 0;
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( (state == DECODE || state == BRK0) && RDY )
         casex( IR )
                 8'bx11x_xx01:   // SBC, ADC
@@ -1087,8 +1158,10 @@ always @(posedge clk )
 
                 default:        adc_sbc <= 0;
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( (state == DECODE || state == BRK0) && RDY )
         casex( IR )
                 8'b011x_xx01:   // ADC
@@ -1096,8 +1169,10 @@ always @(posedge clk )
 
                 default:        adc_bcd <= 0;
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b0xxx_x110,   // ASL, ROL, LSR, ROR (abs, absx, zpg, zpgx)
@@ -1106,8 +1181,10 @@ always @(posedge clk )
 
                 default:        shift <= 0;
         endcase
-
+     end
+     
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b11x0_0x00,   // CPX, CPY (imm/zp)
@@ -1117,8 +1194,10 @@ always @(posedge clk )
 
                 default:        compare <= 0;
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b01xx_xx10:   // ROR, LSR
@@ -1126,8 +1205,10 @@ always @(posedge clk )
 
                 default:        shift_right <= 0; 
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b0x1x_1010,   // ROL A, ROR A
@@ -1136,8 +1217,10 @@ always @(posedge clk )
 
                 default:        rotate <= 0; 
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b00xx_xx10:   // ROL, ASL
@@ -1162,8 +1245,10 @@ always @(posedge clk )
                 
                 default:        op <= OP_ADD; 
         endcase
-
+    end
+    
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY )
         casex( IR )
                 8'b0010_x100:   // BIT zp/abs   
@@ -1171,11 +1256,13 @@ always @(posedge clk )
 
                 default:        bit_ins <= 0; 
         endcase
-
+    end
+    
 /*
  * special instructions
  */
 always @(posedge clk )
+    if (clken) begin
      if( state == DECODE && RDY ) begin
         php <= (IR == 8'h08);
         clc <= (IR == 8'h18);
@@ -1188,11 +1275,14 @@ always @(posedge clk )
         sed <= (IR == 8'hf8);
         brk <= (IR == 8'h00);
      end
-
+    end
+    
 always @(posedge clk)
+    if (clken) begin
     if( RDY )
         cond_code <= IR[7:5];
-
+    end
+    
 always @*
     case( cond_code )
             3'b000: cond_true = ~N;
@@ -1209,12 +1299,15 @@ always @*
 reg NMI_1 = 0;          // delayed NMI signal
 
 always @(posedge clk)
+    if (clken) begin
     NMI_1 <= NMI;
+    end
 
 always @(posedge clk )
+    if (clken) begin
     if( NMI_edge && state == BRK3 )
         NMI_edge <= 0;
     else if( NMI & ~NMI_1 )
         NMI_edge <= 1;
-
+    end
 endmodule
